# INPUT: Read the CSV file
[[inputs.file]]
  files = ["/path/to/your/input.csv"]
  data_format = "csv"
  csv_separator = ";"
  csv_header_row_count = 1
  csv_skip_rows = 0
  csv_skip_columns = 0

  csv_column_names = ["date", "description", "temperature", "rh", "battery", "messages", "sw", "gw"]

  csv_timestamp_column = "date"
  csv_timestamp_format = "02-01-2006 - 15:04:05"
  csv_timezone = "UTC"

# PROCESSING: Transform the data
[[processors.starlark]]
  source = '''
def apply(metric):
    # Map "description" field to sensorID and extract details
    parts = metric.fields["description"].split(" ")
    metric.fields["sensorID"] = parts[-1]  # Extract sensorID (e.g., LA66N712212)
    metric.fields["Type"] = "luchtvochtigheid"  # Add static type
    metric.fields["Location"], metric.fields["Section"], metric.fields["Place"], metric.fields["Orientation"] = (
        parts[0], parts[1], parts[2], parts[3].strip("()")
    )

    # Rename fields to match the output structure
    metric.fields["Temp_1"] = metric.fields.pop("temperature")
    metric.fields["RH"] = metric.fields.pop("rh")
    metric.fields["Battery"] = metric.fields.pop("battery")
    metric.fields["Messages"] = metric.fields.pop("messages")
    metric.fields["Signal"] = metric.fields.pop("sw")
    metric.fields["Gateways"] = metric.fields.pop("gw")

    # Add the final desired fields
    metric.fields["timestamp"] = metric.time.isoformat() + "Z"  # ISO 8601 UTC format

    return metric
'''

# OUTPUT: Write the transformed data to a new CSV file
[[outputs.file]]
  files = ["/path/to/your/output.csv"]
  data_format = "csv"
  csv_timestamp_format = "2006-01-02T15:04:05Z"
  csv_column_names = ["timestamp", "sensorID", "Type", "Location", "Section", "Place", "Orientation", "Temp_1", "RH", "Battery", "Messages", "Signal", "Gateways"]
